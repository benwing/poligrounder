#!/bin/sh

# Amount of memory (in megabytes) to reserve for system operation when
# setting the maximum heap size.
RESERVED_MEMORY=512

TEXTGROUNDER_VERSION=0.3.0

if [ -z "$TEXTGROUNDER_DIR" ]; then
  echo "Must set TEXTGROUNDER_DIR to top level of TextGrounder distribution"
  exit 1
fi

JAVA="$JAVA_HOME/bin/java"
HADOOP_BINARY="${HADOOP_BINARY:-hadoop}"

# NOTE: If environment var TG_JAVA_OPT is set on entry, it will be used.

# Process options

VERBOSE=no
DEBUG=no
HADOOP=
HADOOP_NONDIST=
MEMORY=
JAVA_MISC_OPT=
while true; do
  case "$1" in
    -verbose | --verbose ) VERBOSE=yes; shift ;;
    -debug | --debug ) DEBUG=yes; shift ;;
    -m | -memory | --memory ) MEMORY="$2"; shift 2 ;;
    -minheap | --minheap )
      JAVA_MISC_OPT="$JAVA_MISC_OPT -XX:MinHeapFreeRatio=$2"; shift 2 ;;
    -maxheap | --maxheap )
      JAVA_MISC_OPT="$JAVA_MISC_OPT -XX:MaxHeapFreeRatio=$2"; shift 2 ;;
    -escape-analysis | --escape-analysis )
      JAVA_MISC_OPT="$JAVA_MISC_OPT -XX:+DoEscapeAnalysis"; shift ;;
    -compressed-oops | --compressed-oops )
      JAVA_MISC_OPT="$JAVA_MISC_OPT -XX:+UseCompressedOops"; shift ;;
    -hadoop | --hadoop) HADOOP=yes; shift ;;
    -hadoop-nondist | --hadoop-nondist) HADOOP_NONDIST=yes; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

# For info on Sun JVM options, see:

# http://java.sun.com/docs/hotspot/VMOptions.html
#
# (redirects to:
#
# http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html
#
# )
#
# Also see the following for tuning garbage collection:
#
# http://www.oracle.com/technetwork/java/gc-tuning-5-138395.html

JAVA_MEMORY_OPT=
# Try to set the maximum heap size to something slightly less than
# the physical memory of the machine.  
if [ -n "$MEMORY" ]; then
  JAVA_MEMORY_OPT="-Xmx$MEMORY"
elif [ -n "$TG_SET_JVM_MEMORY" ]; then
  MEMMB=`$TEXTGROUNDER_DIR/bin/textgrounder-memory`
  if [ "$VERBOSE" = yes ]; then
    echo "Output from textgrounder-memory is: $MEMMB"
  fi
  if [ "$MEMMB" = unknown ]; then
    # The old way we set the heap size, to a very high virtual size.
    if [ -z "$MEMORY" ]; then
      if $JAVA -version 2>&1 | grep '64-Bit' > /dev/null; then
       JAVA_IS_64=yes
       # Maximum on Linux is about 127t (127 TB, i.e. 130,048 GB).  Maximum on
       # MacOS X 10.6 (Snow Leopard) is about 125t, but values that big cause a
       # pause of about 6 seconds at the beginning and a couple of seconds at
       # the end on my 4GB Mac.  4t doesn't cause much of a pause.
       MEMORY=4t
      else
       JAVA_IS_64=no
       MEMORY=2g
      fi
    fi
  else
    MEMORY="`expr $MEMMB - $RESERVED_MEMORY`m"
  fi
  JAVA_MEMORY_OPT="-Xmx$MEMORY"
fi

if [ "$VERBOSE" = yes -a -n "$JAVA_MEMORY_OPT" ]; then
  echo "Setting maximum JVM heap size to $MEMORY"
fi

JAVA_DEBUG_OPT=
if [ "$DEBUG" = yes ]; then
  # Print details about when and how garbage collection happens; recommended
  # in http://www.oracle.com/technetwork/java/gc-tuning-5-138395.html
  JAVA_DEBUG_OPT="-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+TraceClassUnloading"
  #This will output a lot of stuff about class loading.
  #JAVA_DEBUG_OPT="$JAVA_DEBUG_OPT -XX:+TraceClassLoading"
fi

JARS="`echo $TEXTGROUNDER_DIR/lib/*.jar $TEXTGROUNDER_DIR/lib_managed/*/*.jar $TEXTGROUNDER_DIR/lib_managed/*/*/*.jar $TEXTGROUNDER_DIR/lib_managed/*/*/*/*.jar $TEXTGROUNDER_DIR/output/*.jar $TEXTGROUNDER_DIR/target/*.jar | tr ' ' ':'`"
SCALA_LIB="$HOME/.sbt/boot/scala-2.9.2/lib/scala-library.jar"
CP="$TEXTGROUNDER_DIR/target/classes:$SCALA_LIB:$JARS:$CLASSPATH"

HADOOP_COMMAND="$HADOOP_BINARY jar $TEXTGROUNDER_DIR/target/textgrounder-assembly.jar"
JAVA_COMMAND="$JAVA $JAVA_MEMORY_OPT $JAVA_DEBUG_OPT $JAVA_MISC_OPT $TG_JAVA_OPT -classpath $CP"
#Running Scala using Java currently works, and ensures that we will run
#properly even if Scala isn't installed on the system or an older version
#is installed. (Since we download our own Scala libraries.)
#SCALA_COMMAND="scala -classpath $CP"

CMD="$1"
shift

help()
{
cat <<EOF
TextGrounder $TEXTGROUNDER_VERSION usage:
  textgrounder [OPTIONS ...] COMMAND [ARGS ...]

Options (mostly low-level):

  --memory MEM          Specify maximum heap size (e.g. 2048m or 20g); if not
                        given, textgrounder will attempt to set the heap size
                        to slightly under physical memory if the environment
                        variable TG_SET_JVM_MEMORY is set; otherwise, the
                        JVM will be left to set the heap size automatically.
  --verbose             Show what commands are being executed.
  --debug               Tell the JVM to output debugging info.
  --minheap RATIO, --maxheap RATIO
                        Set the minimum and maximum free heap ratios.  If the
                        JVM is hogging memory, try --minheap 20 --maxheap 40
                        to make it more aggressively release memory to the OS
                        (or --minheap 10 --maxheap 20 to be even more
                        aggressive).
  --escape-analysis     Turn on escape analysis (on by default in Java 6
                        release 23 and later); may speed up code by reducing
                        allocation for short-lived objects.
  --compressed-oops     Turn on compressed object pointers (on by default
                        in Java 6 release 23 and later); may reduce memory
                        size on 64-bit machines (and possibly speed things up
                        as well).

Environment variables:

  TEXTGROUNDER_DIR      Location of TextGrounder installation; needs to be
                        set for this script to work at all.
  TG_SET_JVM_MEMORY     If non-blank, set the maximum JVM heap size to slightly
                        under the total physical memory size; useful if you
                        are getting out-of-memory errors.
  TG_JAVA_OPT           If non-blank, should contain additional options for
                        the JVM, and will be passed directly to the 'java'
                        executable.  See 'java -help' and 'java -X' for a
                        description of some possible options, although neither
                        of these documents all of the options.  For example,
                        none of the "non-standard/not-stable" -XX options
                        are documented this way; these typically control
                        performance, debugging and/or other low-level behavior.
                        See the following URL (although even this doesn't
                        document all of them):

   http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html 

General commands:

  build-all             build TextGrounder from source using SBT
  build                 enter SBT command line, to issue further commands
  build COMMAND ...     run SBT using some other arbitrary command(s)
  run CLASS ...         run the main method of a given class
  help                  output this help message

Commands for toponym resolution:

  import-gazetteer ...  import a gazetteer from raw form to serialized form
  import-corpus ...     import a corpus from raw form to serialized form
  preprocess-labelprop ...
                        preprocess label propagation
  geotext-lp ...        run GeoText label propagation resolver
  resolve ...           run the toponomy resolver
  write-to-kml ...      write a resolved corpus to visualizable KML format
  eval ...              evaluated a resolved corpus against a gold corpus
  viz ...               visualize a serialized corpus

Commands for the Geolocate module:

  geolocate-document ... do document-level geolocation
  hadoop-geolocate-document ...
                        do document-level geolocation using Hadoop
  hadoop-nondist-geolocate-document ...
                        do document-level geolocation using Hadoop, but run
                        in non-distributed mode (aka standalone mode), for
                        testing
  geolocate-toponym ... do toponym-level geolocation
  generate-kml ...      create KML files showing the distribution over the
                        Earth of specific words

Commands for the Bayesian module:

  rlda-run ...          train region model
  spher-run ...         train spherical model
  rlda-fcrm-run ...     train fully-constrained region model
  rlda-convert-from ... convert from region-model format
  rlda-convert-to ...   convert to region-model format
  rlda-prob-out ...     pretty-print probabilities
  rlda-xml-prob-out ... pretty-print probabilities in XML format

The arguments for the various commands are specific to the particular
command, and often include options and/or file names.  Use --help after the
command for more information.
EOF
}

RUN_SBT="$JAVA -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256m -Xmx512M -Xss2M -jar $TEXTGROUNDER_DIR/bin/sbt-launch-*.jar"

execute()
{
  local CD
  if [ "$1" = "--cd" ]; then
    CD=yes
    shift
  else
    CD=no
  fi
  RUNCMD="$1"; shift
  if [ "$VERBOSE" = yes ]; then
    if [ "$CD" = yes ]; then
      echo Executing: cd $TEXTGROUNDER_DIR
    fi
    echo Executing: $RUNCMD ${1+"$@"}
  fi
  if [ "$CD" = yes ]; then
    cd $TEXTGROUNDER_DIR
  fi
  $RUNCMD ${1+"$@"}
}

if [ -z "$CMD" ]; then
  help; exit 1

elif [ "$CMD" = 'build' ]; then

  # We need to cd to the top-level TextGrounder dir when running SBT,
  # so the proper build.sbt file gets picked up, etc.
  execute --cd "$RUN_SBT" ${1+"$@"}

elif [ "$CMD" = 'build-all' ]; then

  # We need to cd to the top-level TextGrounder dir when running SBT,
  # so the proper build.sbt file gets picked up, etc.
  execute --cd "$RUN_SBT update compile" ${1+"$@"}

else  

  CLASS=
  HADOOP_ARGS=
  TGPACK=opennlp.textgrounder
  TGTRAPP=$TGPACK.tr.app
  TGAPP=$TGPACK.app
  TGBAYESAPP=$TGPACK.bayesian.apps
  TGGEOLOCATE=$TGPACK.geolocate

  case $CMD in
    # Various commands
    resolve) CLASS=$TGTRAPP.RunResolver;;
    geotext-lp) CLASS=$TGTRAPP.GeoTextLabelProp;;
    import-gazetteer) CLASS=$TGTRAPP.ImportGazetteer;;
    import-corpus) CLASS=$TGTRAPP.ImportCorpus;;
    preprocess-labelprop) CLASS=$TGTRAPP.LabelPropPreproc;;
    write-to-kml) CLASS=$TGTRAPP.WriteCorpusToKML;;
    eval) CLASS=$TGTRAPP.EvaluateCorpus;;
    viz) CLASS=$TGTRAPP.VisualizeCorpus;;

    # Commands in the Bayesian code (there are many more)
    rlda-convert-from) CLASS=$TGBAYESAPP.ConvertFromRegionModelFormat;;
    rlda-convert-to) CLASS=$TGBAYESAPP.ConvertToRegionModelFormat;;
    rlda-fcrm-run) CLASS=$TGBAYESAPP.TrainFullyConstrainedRegionModel;;
    rlda-prob-out) CLASS=$TGBAYESAPP.PrettyPrintProbabilities;;
    rlda-xml-prob-out) CLASS=$TGBAYESAPP.PrettyPrintProbabilitiesXML;;
    rlda-run) CLASS=$TGBAYESAPP.TrainRegionModel;;
    spher-run) CLASS=$TGBAYESAPP.TrainSphericalModel;;

    # Geolocate commands
    geolocate-document)
      # Include now because we need TEXTGROUNDER_URL; but not before so that
      # we don't get complaints about TG_CORPUS_DIR otherwise.
      . config-geolocate

      # Note that the only difference between running in distributed and
      # non-distributed mode is how we run things (using 'hadoop jar' for
      # distributed, 'java' for non-distributed) and the input paths we
      # pass (through --textgrounder-dir here, and also through corpora
      # paths in 'tg-geolocate').
      if [ -n "$HADOOP" ]; then
        HADOOP_ARGS="--textgrounder-dir $TEXTGROUNDER_URL" CLASS=$TGGEOLOCATE.HadoopGeolocateDocumentApp
      elif [ -n "$HADOOP_NONDIST" ]; then
        HADOOP_ARGS="--textgrounder-dir $TEXTGROUNDER_URL" CLASS=$TGGEOLOCATE.HadoopGeolocateDocumentApp
      else
        CLASS=$TGGEOLOCATE.GeolocateDocumentApp
      fi
    ;;
    geolocate-toponym)
       
      CLASS=$TGGEOLOCATE.toponym.GeolocateToponymApp;;
    generate-kml) CLASS=$TGGEOLOCATE.GenerateKMLApp;;

    # Misc
    run) CLASS="$1"; shift;;
    help) help; exit 1;;
    *) echo "Unrecognized command: $CMD"; help; exit 1;;
  esac

  # We need to *not* cd to the top-level TextGrounder dir, otherwise if
  # there are command-line arguments referring relatively to files, the
  # files won't be found because the lookup will be relative to the
  # wrong directory.

  if [ -n "$HADOOP" ]; then
    execute "$HADOOP_COMMAND $CLASS" $HADOOP_ARGS ${1+"$@"}
  else
    execute "$JAVA_COMMAND $CLASS" $HADOOP_ARGS ${1+"$@"}
  fi

fi
